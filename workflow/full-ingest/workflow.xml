<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<workflow-app xmlns="uri:oozie:workflow:0.5" name="FULL-INGEST-DIRECT-WF-${source_name}-${schema}-${table}">
    <parameters>
        <property>
            <name>prefix</name>
            <value>/user/trace/development</value>
        </property>
        <property>
            <name>stagingdb</name>
            <value>staging_dev</value>
        </property>
        <property>
            <name>targetdb</name>
            <value>${source_name}_dev</value>
        </property>
        <property>
            <name>outputdir</name>
            <value>${prefix}/source/${source_name}/${schema}_${table}</value>
        </property>
        <property>
            <name>staging_tbl</name>
            <value>${source_name}_${schema}_${table}</value>
    </parameters>
    <start to="getValues"/>
    <action name="getValues">
        <shell
            xmlns="uri:oozie:shell-action:0.3">
            <job-tracker>${resourceManager}</job-tracker>
            <name-node>${nameNode}</name-node>
            <exec>python</exec>
            <argument>date_helper.py</argument>
            <file>date_helper.py</file>
            <capture-output/>
        </shell>
        <ok to="removeExisting"/>
        <error to="kill"/>
    </action>

    <action name="removeExisting">
        <fs>
            <name-node>${nameNode}</name-node>
            <delete path="${outputdir}/CURRENT/"></delete>
        </fs>
        <ok to="sqoop"/>
        <error to="kill"/>
    </action>
    <action name="sqoop">
        <sqoop xmlns="uri:oozie:sqoop-action:0.3">
            <job-tracker>${resourceManager}</job-tracker>
            <name-node>${nameNode}</name-node>
            <job-xml>conf/oraoop-site.xml</job-xml>
            <arg>import</arg>
            <arg>-Dmapreduce.job.user.classpath.first=true</arg> 
            <arg>-Doraoop.import.consistent.read=true</arg>
            <arg>--connect</arg>
            <arg>${jdbc_uri}</arg>
            <arg>-m</arg>
            <arg>${mapper}</arg>
            <arg>--table</arg>
            <arg>${schema}.${table}</arg>
            <arg>--target-dir</arg>
            <arg>${outputdir}/CURRENT</arg>
            <arg>--delete-target-dir</arg>
            <arg>--username</arg>
            <arg>${username}</arg>
            <arg>--password</arg>
            <arg>${password}</arg>
            <arg>--as-parquetfile</arg>
            <arg>--direct</arg>
            <arg>--map-column-java</arg>
            <arg>${columns_java}</arg>
        </sqoop>
        <ok to="prepDistcp"/>
        <error to="kill"/>
    </action>

    <action name="prepDistcp">
        <fs>
            <name-node>${nameNode}</name-node>
            <delete path="${outputdir}/ingest_date=${wf:actionData('getValues')['DATE']}"></delete>
        </fs>
        <ok to="distcp"/>
        <error to="kill"/>
    </action>
    <action name="distcp">
        <distcp
            xmlns="uri:oozie:distcp-action:0.2">
            <job-tracker>${resourceManager}</job-tracker>
            <name-node>${nameNode}</name-node>
            <arg>${nameNode}/${outputdir}/CURRENT/</arg>
            <arg>${nameNode}/${outputdir}/ingest_date=${wf:actionData('getValues')['DATE']}/</arg>
        </distcp>
        <ok to="markRawDataReady"/>
        <error to="kill"/>
    </action>
    <action name="markRawDataReady">
        <fs>
            <name-node>${nameNode}</name-node>
            <touchz path="${nameNode}/${outputdir}/ingest_date=${wf:actionData('getValues')['DATE']}/_SUCCESS"></touchz>
        </fs>
        <ok to="createExternalTable"/>
        <error to="kill"/>
    </action>
    <action name="createExternalTable">
        <hive
            xmlns="uri:oozie:hive-action:0.6">
            <job-tracker>${resourceManager}</job-tracker>
            <name-node>${nameNode}</name-node>
            <query>
DROP TABLE IF EXISTS ${stagingdb}.${staging_tbl};
CREATE EXTERNAL TABLE ${stagingdb}.${staging_tbl} (
    ${columns_create}
) STORED AS PARQUET LOCATION '${outputdir}/ingest_date=${wf:actionData('getValues')['DATE']}';
            </query>
        </hive>
        <ok to="exportFlat"/>
        <error to="kill"/>
    </action>

    <fork name="exportFork">
        <path start="exportFlat"/>
        <path start="exportORC"/>
    </fork>
    <action name="exportFlat">
        <hive
            xmlns="uri:oozie:hive-action:0.6">
            <job-tracker>${resourceManager}</job-tracker>
            <name-node>${nameNode}</name-node>
            <query>
SET hive.exec.compress.output=false;
ADD JAR ${nameNode}/user/oozie/share/lib/lib_20161221211109/hive/hive-contrib-1.2.1000.2.5.3.0-37.jar;

CREATE TEMPORARY EXTERNAL TABLE ${staging_tbl}_CURRENT (
    ${columns_create}
) STORED AS PARQUET LOCATION '${outputdir}/ingest_date=${wf:actionData('getValues')['DATE']}';

CREATE TEMPORARY EXTERNAL TABLE ${staging_tbl}_FLAT (
    ${columns_create}
) ROW FORMAT SERDE "org.apache.hadoop.hive.contrib.serde2.MultiDelimitSerDe"
  WITH SERDEPROPERTIES (
      'field.delim'='${field_delimiter}'
  )
  LOCATION '${prefix}/source_flat/${source_name}/${schema}_${table}/${wf:actionData('getValues')['DATE']}'
  TBLPROPERTIES('serialization.null.format'='');
    
INSERT OVERWRITE TABLE ${staging_tbl}_FLAT
SELECT 
    ${columns_flat}
FROM ${staging_tbl}_CURRENT;
            </query>
        </hive>
        <ok to="markFlatDataReady"/>
        <error to="kill"/>
    </action>

    <action name="markFlatDataReady">
        <fs>
            <name-node>${nameNode}</name-node>
            <touchz path="${prefix}/source_flat/${source_name}/${schema}_${table}/${wf:actionData('getValues')['DATE']}/_SUCCESS"></touchz>
        </fs>
        <ok to="endJoin"/>
        <error to="kill"/>
    </action>

    <action name="exportORC">
        <hive
            xmlns="uri:oozie:hive-action:0.6">
            <job-tracker>${resourceManager}</job-tracker>
            <name-node>${nameNode}</name-node>
            <query>
CREATE DATABASE IF NOT EXISTS ${source_name};

CREATE TEMPORARY EXTERNAL TABLE ${targetdb}.${schema}_${table}_CURRENT (
    ${columns_create}
) STORED AS PARQUET LOCATION '${outputdir}/ingest_date=${wf:actionData('getValues')['DATE']}';

CREATE TABLE IF NOT EXISTS ${targetdb}.${schema}_${table} (
    ${columns_create}
) STORED AS ORC;
    
INSERT OVERWRITE TABLE ${targetdb}.${schema}_${table}
SELECT 
    ${columns_flat}
FROM ${targetdb}.${schema}_${table}_CURRENT;
            </query>
        </hive>
        <ok to="markORCDataReady"/>
        <error to="kill"/>
    </action>

    <action name="markORCDataReady">
        <fs>
            <name-node>${nameNode}</name-node>
            <touchz path="/apps/hive/warehouse/${targetdb}/${schema}_${table}/_SUCCESS"></touchz>
        </fs>
        <ok to="endJoin"/>
        <error to="kill"/>
    </action>

    <join name="endJoin" to="end"/>
    <kill name="kill">
        <message>${wf:errorMessage(wf:lastErrorNode())}</message>
    </kill>
    <end name="end"/>
</workflow-app>
