<workflow-app name="T-FILES-FULL-${source_name}-${schema}-${table}"
   xmlns="uri:oozie:workflow:0.5">
   <parameters>
        <property>
            <name>prefix</name>
            <value>/user/trace/development/</value>
        </property>
        <property>
            <name>stagingdb</name>
            <value>staging_dev</value>
        </property>
        <property>
            <name>targetdb</name>
            <value>${source_name}_dev</value>
        </property>
        <property>
            <name>outputdir</name>
            <value>${prefix}/source/${source_name}/${schema}_${table}/</value>
        </property>
        <property>
            <name>sourcedir</name>
            <value>${prefix}/source_files/${source_name}/${schema}_${table}/</value>
        </property>
        <property>
            <name>staging_tbl</name>
            <value>${source_name}_${schema}_${table}</value>
         </property>
        <property>
            <name>reconcile</name>
            <value>append</value>
         </property>
      </parameters>
   <start to="getDates"/>
   <action name="getDates">
      <shell
         xmlns="uri:oozie:shell-action:0.3">
         <job-tracker>${resourceManager}</job-tracker>
         <name-node>${nameNode}</name-node>
         <exec>python</exec>
         <argument>date_helper.py</argument>
         <file>date_helper.py</file>
         <capture-output/>
      </shell>
      <ok to="prepCopyToPrevious"/>
      <error to="kill"/>
   </action>
   <action name="prepCopyToPrevious">
      <fs>
         <name-node>${nameNode}</name-node>
         <delete path="${outputdir}/PREVIOUS"></delete>
      </fs>
      <ok to="copyToPrevious"/>
      <error to="kill"/>
   </action>
   <action name="copyToPrevious">
      <distcp
         xmlns="uri:oozie:distcp-action:0.2">
         <job-tracker>${resourceManager}</job-tracker>
         <name-node>${nameNode}</name-node>
         <arg>${nameNode}/${outputdir}/CURRENT/</arg>
         <arg>${nameNode}/${outputdir}/PREVIOUS</arg>
      </distcp>
      <ok to="rawToParquet"/>
      <error to="kill"/>
   </action>
   <action name="rawToParquet">
      <spark
         xmlns="uri:oozie:spark-action:0.2">
         <job-tracker>${resourceManager}</job-tracker>
         <name-node>${nameNode}</name-node>
         <master>yarn-client</master>
         <name>spark-submit</name>
         <jar>files-full-parquet.py</jar>
         <arg>--sourcedir</arg>
         <arg>${sourcedir}</arg>
         <arg>--outputdir</arg>
         <arg>${outputdir}</arg>
         <arg>--ingestdate</arg>
         <arg>${wf:actionData('getDates')['DATE']}</arg>
         <arg>--schema</arg>
         <arg>${schema}</arg>
         <arg>--db</arg>
         <arg>${targetdb}</arg>
         <arg>--table</arg>
         <arg>${table}</arg>
         <file>files-full-parquet.py</file>
      </spark>
      <ok to="prepDistcp"/>
      <error to="kill"/>
   </action>
   <action name="prepDistcp">
      <fs>
         <name-node>${nameNode}</name-node>
         <delete path="${outputdir}/ingest_date=${wf:actionData('getDates')['DATE']}"></delete>
      </fs>
      <ok to="copyCurrent"/>
      <error to="kill"/>
   </action>
   <action name="copyCurrent">
      <distcp
         xmlns="uri:oozie:distcp-action:0.2">
         <job-tracker>${resourceManager}</job-tracker>
         <name-node>${nameNode}</name-node>
         <arg>${nameNode}/${outputdir}/CURRENT/</arg>
         <arg>${nameNode}/${outputdir}/ingest_date=${wf:actionData('getDates')['DATE']}</arg>
      </distcp>
      <ok to="markParquetReady"/>
      <error to="kill"/>
   </action>
   <action name="markParquetReady">
      <fs>
         <name-node>${nameNode}</name-node>
         <touchz path="${nameNode}/${outputdir}/ingest_date=${wf:actionData('getDates')['DATE']}/_SUCCESS"></touchz>
      </fs>
      <ok to="exportOrc"/>
      <error to="kill"/>
   </action>
   <action name="exportOrc">
      <hive
         xmlns="uri:oozie:hive-action:0.6">
         <job-tracker>${resourceManager}</job-tracker>
         <name-node>${nameNode}</name-node>
         <query>SET tez.queue.name=batch;

CREATE DATABASE IF NOT EXISTS ${targetdb};

CREATE DATABASE IF NOT EXISTS INGEST_${targetdb};

CREATE DATABASE IF NOT EXISTS ${targetdb}_HISTORY;

CREATE TABLE IF NOT EXISTS INGEST_${targetdb}.${schema}_${table}_SCHEMA
   ROW FORMAT SERDE
   'org.apache.hadoop.hive.serde2.avro.AvroSerDe'
STORED AS AVRO
TBLPROPERTIES (
'avro.schema.url'='${nameNode}/${sourcedir}/PARQUET/.metadata/schema.avsc'
);

CREATE EXTERNAL TABLE IF NOT EXISTS INGEST_${targetdb}.${schema}_${table}_CURRENT 
LIKE INGEST_${targetdb}.${schema}_${table}_SCHEMA
STORED AS PARQUET LOCATION '${outputdir}/CURRENT';

CREATE TABLE IF NOT EXISTS ${targetdb}.${schema}_${table}
LIKE INGEST_${targetdb}.${schema}_${table}_SCHEMA
STORED AS ORC;

INSERT OVERWRITE TABLE ${targetdb}.${schema}_${table}
SELECT *
FROM INGEST_${targetdb}.${schema}_${table}_CURRENT;

CREATE TABLE IF NOT EXISTS INGEST_${targetdb}.${schema}_${table}_HISTORYSCHEMA
PARTITIONED BY (ingest_date STRING)
ROW FORMAT SERDE
   'org.apache.hadoop.hive.serde2.avro.AvroSerDe'
STORED AS AVRO
TBLPROPERTIES (
'avro.schema.url'='${nameNode}/${sourcedir}/PARQUET/.metadata/schema.avsc'
);

CREATE TABLE IF NOT EXISTS ${targetdb}_HISTORY.${schema}_${table}
LIKE INGEST_${targetdb}.${schema}_${table}_HISTORYSCHEMA
STORED AS ORC; 

INSERT OVERWRITE TABLE ${targetdb}_HISTORY.${schema}_${table}
PARTITION (ingest_date='${wf:actionData('getDates')['DATE']}')
SELECT * FROM ${targetdb}.${schema}_${table};</query>
      </hive>
      <ok to="markORCDataReady"/>
      <error to="revertPrevious"/>

   </action>
   <action name="markORCDataReady">
        <fs>
           <name-node>${nameNode}</name-node>
            <touchz path="/apps/hive/warehouse/${targetdb}/${schema}_${table}/_SUCCESS"></touchz>
        </fs>
        <ok to="end"/>
        <error to="kill"/>
     </action>

    <action name="revertPrevious">
        <fs>
           <name-node>${nameNode}</name-node>
           <delete path="${nameNode}/${outputdir}/ERROR"></delete>
           <move source="${nameNode}/${outputdir}/CURRENT"
                  target="${nameNode}/${outputdir}/ERROR"></move>
           <move source="${nameNode}/${outputdir}/PREVIOUS" 
                    target="${nameNode}/${outputdir}/CURRENT"></move>
        </fs>
        <ok to="kill"/>
        <error to="kill"/>
</action> 
   <kill name="kill">
      <message>${wf:errorMessage(wf:lastErrorNode())}</message>
   </kill>
   <end name="end"/>
</workflow-app>
